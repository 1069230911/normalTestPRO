                                             TS
                        一、基础
1、常用的数据基本类型声明：number、string、null、undefined、boolean、symbol
2、void  用来表示没有任何返回值的函数
    补充：void 等于 undefined 和 null；当函数调用的时候没有指定返回值的时候，默认就是undefined
3、any 值为任意类型 等价于不 声明类型（不经常建议使用，如果经常使用的话也就失去了使用ts的意义）;
4、如果变量在声明的时候有赋值，那么在后面该变量的类型就等于 声明的时候赋值的类型。
     (1.)如 let num = 1；num被ts默认推断为 Number类型
5、联合类型: 该变量可能拥有多种类型 使用 或 | 隔开。
     (1.) 在访问联合类型的属性或者方法的时候，必须是2者共同拥有的(主要出现在方法的参数上)
     (2.)如果是普通声明变量的话，会自动根据上次赋值的类型自动检测
6、接口 对象的类型：必先用interface前缀，interface str {name: string}
    如果想让新的对象类型和结构和其他对象一模一样可以使用
     (1.)如：newStr : str = {} 这时候 newStr 和str的对象接口定义的属性名、类型完全一样（等于克隆）
     (2.)可选属性--如果不想完全一样 可以在旧的对象属性后面加个问号:  {age?:string}
     (3.)任意属性--如果想在新的对象中添加新的属性如何解决？ 在旧的对象中添加 [propName:string]:any
            如果有使用任意属性的，那么可选属性、确定属性的类型必须和任意属性的类型一致；通常设置any 避免影响其他属性类型
     (4.)只读属性-- {readonly id：string}，readonly只读 只允许在第一次声明的时候赋值
7、数组：声明方式
           类型 + []; let ary: any[] = [1]  ---- any 是比较常用的
           泛型：let ary: Array<number> = [1] 待详情
           接口声明：不常用 只是用来表示类数组
           补充：数组在定义的时候可以添加 ReadonlyArray --- 数组只读 无法改变， 这个声明的数组也不能直接赋值给别人（除非使用类型断言）
8、函数：声明方式   不能输入多余的参数
            1.函数表达式：let myFn = (x: string, y: number)=>{} ；函数 手动定义返回类型 好像是很少见（尤其是箭头函数）
            2.函数声明：function (x: string): number=>{};
                    2.1声明方式二： let myFn: (value1: number, value2: number) => number = (x: number, y: number)=>{}
                                    声明方式二 对应参数和返回值，主要是以左侧定义的类型为主。
         可选参数 加问号 ---- 在可选参数后面
         es6扩展运算符：定义的是一个数组 ...item: string[];
         重载 ？？？？
         3.补充：
            3.1：在调用函数的时候直接在括号里面定义对象并传递对象多个参数的时候会报错， 这里可以使用类型断言

9、类型断言：不是类型转换，主要用于不确定传递进来的值到底是什么类型,即 联合类型 -- 没有写这种类型，那么是会报错的（目的是为了防止报错）
            <类型>值； 值 as 类型； 在react的jsx中使用第二种
            1.手动指定一个值的类型；尤其是在使用 联合类型的时候
            2.用途补充：
                2.1：可以使用于 数组中的 readonlyArray 进行赋值
10.别名：使用type声明 如：type str = string; 后面就可以使用str替代字符串
11. 字符串字面量 类型： 使用type 声明 如：type name = '张三' | '李四'; 其他变量在用到name的时候只能是上面2个值中的一个
                    如：scName：name; scName 只能被赋值为 name的2个值中的一个
12.元组：暂时不懂有什么用....
               1.越界: 当前数组长度超过开始定义的长度的时候 就发生了越界；越界添加的元素类型 必须是前面声明的几种类型之一。
13.枚举：限定取值在某一范围内；比如 一天24小时 enum 声明 如 enum time = {'01', '02'}
        1.和ES6很相似，如：访问下标 time[0] 会等于 '01'; 如果访问 time['01'] 会等于 0;
        2.声明方式二 ：enum time = {'01' = 1, '02' = 2}; 那么 第一点 会变成 1；
            第二点 补充： 如果前面的 有赋值下标 那么后面的将从上一个值的下标开始递归
             再次补充：如果2个下标一样，那么后面的将会覆盖前面的元素

                        总结一
                            1.其实 接口 是可以当成一种类型来使用的
